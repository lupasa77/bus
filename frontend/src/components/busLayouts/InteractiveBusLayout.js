import React, { useState } from "react";
import "./InteractiveBusLayout.css";

// –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –¥–ª—è –∞–≤—Ç–æ–±—É—Å–∞ (—ç—Ç–æ –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ JSON-—Ñ–∞–π–ª)
const layoutData = [
  // –ü–µ—Ä–≤—ã–π —Ä—è–¥: –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –º–µ—Å—Ç–∞
  { type: "driver", row: 1, col: 1 },
  { type: "driver", row: 1, col: 2 },
  // –í—Ç–æ—Ä–æ–π —Ä—è–¥: —Å–∏–¥–µ–Ω—å—è
  { type: "seat", seatNum: 1, row: 2, col: 1 },
  { type: "seat", seatNum: 2, row: 2, col: 2 },
  { type: "seat", seatNum: 3, row: 2, col: 3 },
  { type: "seat", seatNum: 4, row: 2, col: 4 },
  // –¢—Ä–µ—Ç–∏–π —Ä—è–¥: –ø—Ä–æ—Ö–æ–¥ –∏ —Å–∏–¥–µ–Ω—å—è
  { type: "door", row: 3, col: 1 },
  { type: "seat", seatNum: 5, row: 3, col: 2 },
  { type: "seat", seatNum: 6, row: 3, col: 3 },
  { type: "seat", seatNum: 7, row: 3, col: 4 },
  // –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Ä—è–¥: —Å–∏–¥–µ–Ω—å—è
  { type: "seat", seatNum: 8, row: 4, col: 1 },
  { type: "seat", seatNum: 9, row: 4, col: 2 },
  { type: "seat", seatNum: 10, row: 4, col: 3 },
  { type: "seat", seatNum: 11, row: 4, col: 4 },
  // –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä—è–¥—ã –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏‚Ä¶
];

const defaultSeatStatus = {}; // –Ω–∞–ø—Ä–∏–º–µ—Ä, {1: "vacant", 2: "occupied", ...}

export default function InteractiveBusLayout({ onSeatSelect, editMode }) {
  // –•—Ä–∞–Ω–∏–º —Å—Ç–∞—Ç—É—Å –º–µ—Å—Ç: "vacant", "occupied", "selected", "closed"
  const [seatStatus, setSeatStatus] = useState(defaultSeatStatus);

  // –ü—Ä–∏–º–µ—Ä: —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ –º–µ—Å—Ç—É
  const handleClick = (item) => {
    if (item.type !== "seat") return; // —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ—Å—Ç
    const currentStatus = seatStatus[item.seatNum] || "vacant";

    // –ï—Å–ª–∏ –º–µ—Å—Ç–æ –∑–∞–∫—Ä—ã—Ç–æ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (currentStatus === "closed") return;

    // –ï—Å–ª–∏ –º–µ—Å—Ç–æ –∑–∞–Ω—è—Ç–æ –∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å tooltip (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –∑–¥–µ—Å—å)
    if (currentStatus === "occupied" && !editMode) {
      // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å –∏–º–µ–Ω–µ–º –ø–∞—Å—Å–∞–∂–∏—Ä–∞
      return;
    }

    // –í —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –µ—Å–ª–∏ –º–µ—Å—Ç–æ —Å–≤–æ–±–æ–¥–Ω–æ, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä
    let newStatus;
    if (currentStatus === "vacant") {
      newStatus = "selected";
    } else if (currentStatus === "selected") {
      newStatus = "vacant";
    } else {
      newStatus = currentStatus;
    }
    setSeatStatus({ ...seatStatus, [item.seatNum]: newStatus });
    if (onSeatSelect) onSeatSelect(item.seatNum, newStatus);
  };

  return (
    <div className="bus-layout-container">
      {layoutData.map((item, index) => {
        const style = {
          gridRow: item.row,
          gridColumn: item.col,
        };
        let content = "";
        let className = "bus-item";
        if (item.type === "seat") {
          const status = seatStatus[item.seatNum] || "vacant";
          className += ` seat ${status}`;
          content = item.seatNum;
        } else if (item.type === "door") {
          className += " door";
          content = "üö™";
        } else if (item.type === "driver") {
          className += " driver";
          content = "üöó";
        }
        return (
          <div
            key={index}
            className={className}
            style={style}
            onClick={() => handleClick(item)}
          >
            {content}
          </div>
        );
      })}
    </div>
  );
}
